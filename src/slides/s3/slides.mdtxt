## <!-- .element: class="slideshow-title" --> 5-steps Process : Exploitation

<small>by [Alexandre D'Hondt](https://github.com/dhondta), 30/11/16</small>

----

--flowchart--

-----

## 1. Introduction

----

### Purpose

**Gain control over target systems**

<br>

- <!-- .element: class="fragment" --> By exploiting vulnerabilities found previously <br>
<small> <br>
<!-- .element: class="fragment" --> **Vulnerability** = *weakness that allows [...] to exploit systems and execute remote code [...]* <br>
**Exploit** = *code that gets sent* and *causes some atypical behavior [...] to execute a payload* <br>
**Payload** = *additional [...] functionality [...] once the exploit has been successfully executed*
</small>
- <!-- .element: class="fragment" --> <u>Ultimate goal</u>: administrative access

----

### Methodology

<u>Input</u>: **List of ports, services and vulnerabilities**

For each target system:

1. <!-- .element: class="fragment" --> Gain access to remote services
2. <!-- .element: class="fragment" --> Grab and crack collected passwords
3. <!-- .element: class="fragment" --> Eventually, eavesdrop from owned system
4. <!-- .element: class="fragment" --> Pivot to other systems

<!-- .element: class="fragment" --> <u>Output</u>: **Unauthorized access**

----

### Important Note

**Exploitation** = Broadest step <br>

- <!-- .element: class="fragment" --> Lack of structure can cause frustration and failure <br> &rarr; Importance of **Recon** and **Scanning** ! <br>
- <!-- .element: class="fragment" --> Different systems, targets, attack vectors and types <br> &rarr; Quality will increase with **knowledge** progress

-----

## 2. Activities

----

### Gain Access to Remote Services

By interacting with running services (e.g. SSH, Telnet)

Usually, passwords must be cracked ;

- <!-- .element: class="fragment" --> **Online** password cracking <br> <small>**Active** technique ; requires service running, very noisy, poor performance (only a few attempts a second !)</small>
- <!-- .element: class="fragment" --> **Offline** password cracking <br> <small>**Passive** technique ; does not require service running, but hashed passwords, better performance (up to millions attempts a second !)</small>

----

### Password Guessing/Cracking

= Method of recovering hashed passwords by guessing

- <!-- .element: class="fragment" --> Brute-force attack <br> <small>No use of found information, every possible combination is tried (given an alphabet) <br><font color="green">Always succeeds</font> but possibly in <font color="red">unrealistic time</font>, <font color="red">very slow</font></small>
- <!-- .element: class="fragment" --> Dictionary attack <br> <small>Should be performed using combinations of information found during Recon <br><font color="red">Eventually succeeds</font>, given the completeness of the used dictionary, <font color="green">much faster</font></small>


- <!-- .element: class="box fragment" --> <u>Throttling technique</u> : limit of unsuccessful login attempts (can result in IP blocking or user lockout)

<!-- .element: class="box-warn" --> 

----

### Password Hash Grabbing

= Finding password hashes for privilege escalation or additional access

- <!-- .element: class="fragment" --> **Windows**: <abbr title="Security Account Manager">SAM</abbr> database <br> at `%WINDOWS%\system32\config\SAM` <br> <small>Hashed using algorithm <abbr title="Lan Manager">LM</abbr> or NTLM</small> <div class="tooltip" style="width: 80px; height: 35px;"><img src="/img/warn.png" class="remove-layout"/><span class="tooltiptext"><b>LM algorithm security flaws</b> <br><small>When a password is entered (e.g. <code>-<@VerySecurePassword!@>-</code>):</small>
<ol>
    <li><b>Uppercase</b>: <code>-<@VERYSECUREPASSWORD!@>-</code><br><small>Drastically reduces the password's complexity !</small></li>
    <li><b>14-characters Truncation/Padding</b>: <code>-<@VERYSECUREP</code><br><small>Makes password's length a known constant ; in many cases, this reduces it !</small></li>
    <li><b>Two 7-characters words storage</b>: <code>-<@VERY</code> / <code>SECUREP</code><br><small>Instead of guessing a 14-characters password, we have to guess two 7-characters ones, which is much faster !</small></li>
</ol>
    </span>
</div>
- <!-- .element: class="fragment" --> **Linux**: `/etc/passwd` and `/etc/shadow` <br> <small></small>

----

### Password Resetting

= Another technique for defeating a password and gaining access

- <!-- .element: class="fragment" --> Requires **physical access** to the target !
- <!-- .element: class="fragment" --> Very **noisy** as it resets the targeted password
- <!-- .element: class="fragment" --> Overwrites the SAM file to create a new password <br><small>Of course, overwritten password cannot be restored !</small>

----

### Privilege Escalation

= Gaining privileges that should not be granted

<!-- .element: class="fragment" --> In some cases, only limited access (simple user) <br><small>(either with or without exploitation)</small>

- <!-- .element: class="fragment" --> Horizontal <br> <small>Gaining other privileges from lateral accounts (with a similar level of privileges)</small>
- <!-- .element: class="fragment" --> Vertical <br> <small>Gaining higher privileges, ultimatily administrative ones</small>

----

### Pivoting

= Move into a network from an owned system

<!-- .element: class="fragment" --> In some cases, exploited system can be used as a relay <br><small>(Netcat, SSH port forwarding, terminal session, ...)</small>

<!-- .element: class="fragment" --> &rarr; Allows to attack a higher-value target system

----

### Remote Shell

= Holy Grail of the penetration tester

- <!-- .element: class="fragment" --> **Command Shell**: simple <abbr title="Command-Line Interface">CLI</abbr> <br> <small>(like `sh` in Linux or `cmd.exe` in Windows ; using such a shell opens a new process)</small>
- <!-- .element: class="fragment" --> <abbr title="Meta-Interpreter ; In-memory advanced extensible payload that provides a stealthy communication with a target, movable from a process to another (in contrast with a classical shell)">[**Meterpreter**](https://www.offensive-security.com/metasploit-unleashed/about-meterpreter/)</abbr> (Metasploit): extended, stealthy <abbr title="Command-Line Interface">CLI</abbr> <br> <small>(Meterpreter can be migrated from a process to another in memory)</small>
- <!-- .element: class="fragment" --> <abbr title="Virtual Network Computing ; a system for sharing a graphical user interface accross a network, including mouse and keyboard actions">[**VNC**](https://en.wikipedia.org/wiki/Virtual_Network_Computing)</abbr>: <abbr title="Graphical User Interface">GUI</abbr> (handling keyboard and mouse events) <br> <small>(like a command shell, it implies running a new process on the target)</small>

<!-- .element: class="fragment" --> <small>NB: A remote shell will run with the privileges of the exploited application !</small>

----

#### Bind VS Reverse Shell

- **Bind**: Listener opened on the target, waiting for a connection from the attacker <br> <small>(consequently, the connection is opened in the Attacker &rarr; Target direction)</small>
- <!-- .element: class="fragment" --> **Reverse**: Listener opened on the attacker, waiting for the connection back from the target <br> <small>(consequently, the connection is opened in the Target &rarr; Attacker direction)</small>

----

#### [Meterpreter Main Commands](https://www.offensive-security.com/metasploit-unleashed/meterpreter-basics/)

- Linux-like: <br> <small>`cd`, `ls`, `ps`, `pwd`, `ifconfig`, `mkdir`, `shutdown`</small>
- <!-- .element: class="fragment" --> Extensions: <br> <small>`search`, `shell`, `migrate`, `cat`, `download`, `upload`, `edit`, `execute`, `kill`</small>
- <!-- .element: class="fragment" --> Advanced: <br> <small>`resource`, `hashdump`, `clearev`, `webcam_list`, `webcam_snap`</small>

----

### Network Traffic Sniffing

= Catching clear-text information in network traffic

<!-- .element: class="fragment" --> <abbr title="Network Interface Card">NIC</abbr> can be in one of the following **modes**:

- <!-- .element: class="fragment" --> **Normal** (default): the NIC only selects packets that it is addressed to
- <!-- .element: class="fragment" --> **Promiscuous**: the NIC passes every packet to the <abbr title="Central Processing Unit">CPU</abbr>

<div class="tooltip" style="height: 100px;"><img src="/img/info.png" class="remove-layout">
    <span class="tooltiptext"><b>Traffic sniffing conditions</b>:
<ul style="padding: 20px;">
    <li>Broadcast (L2/L3): when packets are addressed to an entire network<br><small>L2: OSI Layer 2 (Data Link), e.g. addressed with the MAC address if Ethernet is used</small><br><small>L3: OSI Layer 3 (Network), e.g. addressed with the IP address if Internet Protocol is used</small></li>
    <li>L2 Device = Hub: in this case, traffic is sent to every device directly connected<br><small>By opposition to switches, where traffic is intelligently routed so that each connected device (associated to the port it is connected to) only receives traffic it is addressed to</small></li>
</ul>
    </span>
</div>

----

#### Turning a switch into a hub

**Limited memory** to remember (MAC, Port#) pairs ; <br> &rarr; Flooding bogus MAC addresses can cause the switch to turn into state:

- <!-- .element: class="fragment" --> *fail-open*: it will broadcast the traffic to all ports
- <!-- .element: class="fragment" --> *fail-closed*: it will not forward the traffic anymore (<abbr title="Denial of Service">DoS</abbr>)

----

### Social Engineering

= Art of tricking people into disclosing information or breaking normal security procedures

<br>

The perfect attack has to be **believable**:

- <!-- .element: class="fragment" --> *It plays on human emotions*<br> <small>So that the recipient has no negative perception</small>
- <!-- .element: class="fragment" --> *It stays within the confines of normal behavior* <br> <small>So that it does not raise any alarm</small>

----

### Web Hacking

= Art of exploiting vulnerabilities in web applications <br>(either on client or server side)

<u>Starting assumptions</u>:

- <!-- .element: class="fragment" --> Today, many  systems are connected to the Internet <br><small>Computers, mobile devices, ...</small>
- <!-- .element: class="fragment" --> Web applications are more and more complex <br><small>Very dynamic features, back-end database, multiple layers of authentication</small>
- <!-- .element: class="fragment" --> Everything is interconnected

----

#### Basics of Web Hacking Tools

Main abilities:

1. <!-- .element: class="fragment" --> Request interception <br><small>For editing values of parameters</small>
2. <!-- .element: class="fragment" --> Web resource spidering <br><small>For collecting publicly available resources</small>
3. <!-- .element: class="fragment" --> Response analysis <br><small>For discovering application-level vulnerabilities (with a scanner or manually)</small>

----

#### Common Web Application Security Flaws

- <!-- .element: class="fragment" --> Code Injection <br><small>SQL, OS-level commands, ...</small>
- <!-- .element: class="fragment" --> <abbr title="Cross-Site Scripting">XSS</abbr>

-----

## 3. Techniques & Tools

----

### Online Password Cracking

<div class="column-left">**Description**</div><div class="column-right">
Addresses how the target can be owned by guessing username/password's on running services.
</div>

<div class="column-left">**Tools**</div><div class="column-right">Patator, Medusa, Hydra, Ncrack</div>

<div class="column-left">**Outcomes**</div><div class="column-right">Access to the target through open services thanks to guessed passwords</div>

<div class="column-left">**Labs**</div><div class="column-right">
[Patator](../../labs/s3-online-password-cracking/index.html#patator) <br>
[Medusa](../../labs/s3-online-password-cracking/index.html#medusa) <br>
[Hydra](../../labs/s3-online-password-cracking/index.html#hydra) <br>
[Ncrack](../../labs/s3-online-password-cracking/index.html#ncrack)
</div>

----

### Vulnerability Exploitation

<div class="column-left">**Description**</div><div class="column-right">
Addresses how the target can be owned by exploiting running services.
</div>

<div class="column-left">**Tools**</div><div class="column-right">Metasploit, Powersploit</div>

<div class="column-left">**Outcomes**</div><div class="column-right">Access to the target through backdoors</div>

<div class="column-left">**Labs**</div><div class="column-right">
[Metasploit](../../labs/s3-vulnerability-exploitation/index.html#metasploit)
</div>

<div class="tooltip" style="height: 100px;"><img src="/img/info.png" class="remove-layout">
    <span class="tooltiptext">Other exploit frameworks (commercial):
<ul>
    <li>Metasploit Pro</li>
    <li>CORE Impact</li>
    <li>ImmunitySec's CANVAS</li>
</ul>
    </span>
</div>

----

### Payload Obfuscation

<div class="column-left">**Description**</div><div class="column-right">
Addresses the obfuscation (that is, making the code unreadable to a human) of a payload (e.g. Meterpreter) so that it becomes stealth to detection means.
</div>

<div class="column-left">**Tools**</div><div class="column-right">MsfVenom, Veil-Evasion</div>

<div class="column-left">**Outcomes**</div><div class="column-right">Stealth payloads</div>

<div class="column-left">**Labs**</div><div class="column-right"><font color="grey">None for the time being</font></div>

----

### Offline Password Cracking

<div class="column-left">**Description**</div><div class="column-right">
Consists of cracking passwords apart from the attacked system (with a much better performance than online) based on hashes collected on the target for the purpose of escalating privileges.
</div>

<div class="column-left">**Tools**</div><div class="column-right">Samdump2, BkHive, [PwDump](http://www.openwall.com/passwords/windows-pwdump), HashCat, (collection)<br> John the Ripper, RainbowCrack (cracking)</div>

<div class="column-left">**Outcomes**</div><div class="column-right">Cracked passwords (plaintext versions)</div>

<div class="column-left">**Labs**</div><div class="column-right">
[Samdump2](../../labs/s3-offline-password-cracking/index.html#samdump2-bkhive) <br>
[BkHive](../../labs/s3-offline-password-cracking/index.html#samdump2-bkhive) <br>
[Unshadow](../../labs/s3-offline-password-cracking/index.html#unshadow) <br>
[John the Ripper](../../labs/s3-offline-password-cracking/index.html#john-the-ripper)
</div>

----

### Password Resetting

<div class="column-left">**Description**</div><div class="column-right">
Addresses resetting an account's password in order to gain (privileged) access to the target.
</div>

<div class="column-left">**Tools**</div><div class="column-right">chntpw</div>

<div class="column-left">**Outcomes**</div><div class="column-right">Access to the target</div>

<div class="column-left">**Labs**</div><div class="column-right">
[chntpw](../../labs/s3-password-resetting/index.html#chntpw) <br>
</div>

----

### Network Traffic Sniffing

<div class="column-left">**Description**</div><div class="column-right">
Concerns the ways that network traffic can be eavesdropped.
</div>

<div class="column-left">**Tools**</div><div class="column-right">Dsniff (macof), Wireshark, tcpdump, Ettercap</div>

<div class="column-left">**Outcomes**</div><div class="column-right">Clear-text useful information from the traffic</div>

<div class="column-left">**Labs**</div><div class="column-right"><font color="grey">None for the time being</font></div>

----

### Social Engineering

<div class="column-left">**Description**</div><div class="column-right">
Addresses how to trick a user into disclosing sensitive information or breaking normal security procedures.
</div>

<div class="column-left">**Tools**</div><div class="column-right">SET</div>

<div class="column-left">**Outcomes**</div><div class="column-right">Access to the target</div>

<div class="column-left">**Labs**</div><div class="column-right">
[SET](../../labs/s3-social-engineering/index.html#web-attack-vectors)
</div>

----

### Web-Based Exploitation

<div class="column-left">**Description**</div><div class="column-right">
Gathers techniques applying to web applications.
</div>

<div class="column-left">**Tools**</div><div class="column-right">Nikto, <abbr title="Web Application Audit and Attack Framework">W3AF</abbr>, (vulnerability scanners) <br>WebScarab, <abbr title="Zed Attack Proxy">ZAP</abbr>, Burp Suite (attack proxies)</div>

<div class="column-left">**Outcomes**</div><div class="column-right">Access to the target</div>

<div class="column-left">**Labs**</div><div class="column-right">
[Nikto](../../labs/s3-web-based-exploitation/index.html#nikto) <br>
[W3AF](../../labs/s3-web-based-exploitation/index.html#w3af) <br>
[WebScarab](../../labs/s3-web-based-exploitation/index.html#webscarab) <br>
[ZAP](../../labs/s3-web-based-exploitation/index.html#zap) <br>
[Burp Suite](../../labs/s3-web-based-exploitation/index.html#burp-suite)
</div>

-----

## 4. Quizz

----

---quizz---

-----

## References

<small>
- [[1](https://books.google.com/books?isbn=0124116418)] Patrick Engelbretson, *The Basics of Hacking and Penetration Testing: Ethical Hacking and Penetration Testing Made Easy*, 2nd Ed, 2013.
- [[2](https://www.sans.org/course/hacker-techniques-exploits-incident-handling)] SANS Institute, *SEC504: Hacker Tools, Techniques, Exploits and Incident Handling*.

</small>

